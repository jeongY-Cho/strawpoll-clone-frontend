{"version":3,"sources":["PollHeader.tsx","VoteForm.tsx","CopyLink.tsx","Results.tsx","GotoPollInput.tsx","Poll.tsx","NewPollForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PollHeader","props","prompt","style","paddingBottom","Date","createdAt","toLocaleString","VoteForm","useState","selected","changeSelected","console","log","history","useHistory","url","useRouteMatch","textAlign","margin","paddingLeft","choices","map","item","i","name","className","key","type","id","value","checked","onChange","htmlFor","text","onClick","_e","Axios","post","inc","split","then","push","CopyLink","_props","copied","updateCopy","window","location","href","replace","e","target","select","document","execCommand","readOnly","colors","chroma","scale","Results","selectedColors","length","maxCount","reduce","acc","cur","count","display","flexWrap","justifyContent","marginRight","maxWidth","minWidth","width","backgroundColor","percent","Math","round","total","Fragment","overflowWrap","colSpan","height","padding","PieChartDiv","undefined","hovered","setHovered","PieChart","animate","label","labelRenderProps","dataEntry","labelStyle","fill","opacity","fontSize","data","title","color","percentage","startAngle","onMouseOver","_","onMouseOut","GotoPollInput","showButton","React","updateId","submit","toLowerCase","placeholder","background","onKeyDown","require","Poll","state","invalid","loaded","poll","socket","WebSocket","match","params","this","onmessage","message","JSON","parse","cc","Object","keys","forEach","parseInt","setState","retry","onclose","get","res","close","path","exact","Component","NewPollForm","makeNew","updateMake","updatePrompt","updateChoices","customId","filteredChoices","filter","val","newPoll","trim","put","choicesInput","_value","data-i","dataset","concat","autoFocus","preventDefault","persist","onBlur","splice","maxLength","Home","lineHeight","xmlns","viewBox","d","component","App","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2b5b2c73.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const PollHeader: React.FC<{ prompt: string; createdAt: string }> = (\n  props\n) => {\n  return (\n    <div>\n      <h3>{props.prompt}</h3>\n      <div style={{ paddingBottom: 5 }}>\n        Created: {new Date(props.createdAt).toLocaleString()}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { PollHeader } from \"./PollHeader\";\n\nexport interface IVoteFormProps {\n  id: string;\n  createdAt: string;\n  total: number;\n  prompt: string;\n  choices: {\n    text: string;\n    count: number;\n  }[];\n}\nexport const VoteForm: React.FC<IVoteFormProps> = (props) => {\n  const [selected, changeSelected] = useState(\"\");\n  console.log(props);\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  return (\n    <div style={{ textAlign: \"left\", margin: 50, paddingLeft: \"20%\" }}>\n      <PollHeader createdAt={props.createdAt} prompt={props.prompt} />\n      {props.choices.map((item, i) => {\n        const name = \"choice:\" + i;\n        return (\n          <div className=\"custom-control custom-radio\" key={i}>\n            <input\n              type=\"radio\"\n              id={name}\n              name=\"choices\"\n              value={name}\n              className=\"custom-control-input\"\n              checked={selected === name}\n              onChange={() => {\n                changeSelected(name);\n              }}\n            />\n            <label htmlFor={name} className=\"custom-control-label\">\n              {item.text}\n            </label>\n          </div>\n        );\n      })}\n      <br />\n      <div className=\"btn-group\">\n        <button\n          className=\"btn btn-primary btn-sm\"\n          onClick={(_e) => {\n            Axios.post(`https://strawpoll.jeongyeoncho.com/api/${props.id}`, {\n              inc: selected.split(\":\")[1],\n            }).then(() => {\n              history.push(`${url}/r`);\n            });\n          }}\n        >\n          Vote\n        </button>\n        <button\n          className=\"btn btn-outline-secondary btn-sm\"\n          onClick={() => history.push(`${url}/r`)}\n        >\n          Results\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nexport const CopyLink: React.FC = (_props) => {\n  const [copied, updateCopy] = useState(false);\n\n  return (\n    <div>\n      Click to copy link to this poll:\n      <div>\n        <input\n          type=\"text\"\n          value={window.location.href.replace(\"/r\", \"\")}\n          onClick={(e) => {\n            // @ts-ignore\n            e.target.select();\n            document.execCommand(\"copy\");\n            updateCopy(true);\n          }}\n          readOnly\n        />\n      </div>\n      {copied && <div className=\"text-info\">Link copied!</div>}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { IVoteFormProps as IPoll } from \"./VoteForm\";\nimport { PieChart } from \"./Poll\";\nimport { CopyLink } from \"./CopyLink\";\nimport chroma from \"chroma-js\";\nimport { PollHeader } from \"./PollHeader\";\n\nconst colors = chroma.scale([\n  \"#264653\",\n  \"#2A9D8F\",\n  \"#E9C46A\",\n  \"#F4A261\",\n  \"#E76F51\",\n]);\n\nexport const Results: React.FC<IPoll> = (props) => {\n  const selectedColors = colors.colors(props.choices.length);\n\n  const maxCount = props.choices.reduce((acc, cur) => {\n    return acc > cur.count ? acc : cur.count;\n  }, 0);\n  return (\n    <div>\n      <PollHeader prompt={props.prompt} createdAt={props.createdAt} />\n      <div\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n      >\n        <div style={{ marginRight: 20, maxWidth: \"80%\", minWidth: 200 }}>\n          <table style={{ width: \"100%\" }}>\n            <colgroup>\n              <col\n                style={{ width: \"2rem\", backgroundColor: \"rgba(0,0,0,0.1)\" }}\n              />\n              <col\n                style={{ width: \"3rem\", backgroundColor: \"rgba(0,0,0,0.1)\" }}\n              />\n            </colgroup>\n            <tbody>\n              {props.choices.map((item, i) => {\n                const percent = `${Math.round(\n                  (item.count / props.total) * 100\n                )}%`;\n                return (\n                  <React.Fragment key={i}>\n                    <tr>\n                      <td>{percent}</td>\n                      <td>{item.count}</td>\n                      <td\n                        style={{\n                          textAlign: \"left\",\n                          overflowWrap: \"anywhere\",\n                          paddingLeft: 10,\n                        }}\n                      >\n                        {item.text}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colSpan={3}>\n                        <div\n                          style={{\n                            backgroundColor:\n                              maxCount === item.count\n                                ? selectedColors[i % selectedColors.length]\n                                : \"rgba(0,0,0,0.1)\",\n                            width: item.count ? percent : \"1%\",\n                            height: 10,\n                          }}\n                        ></div>\n                      </td>\n                    </tr>\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n          <div>{props.total} Votes</div>\n          <br />\n          <CopyLink />\n        </div>\n        <div style={{ minWidth: 200, padding: 20 }}>\n          <PieChartDiv\n            choices={props.choices}\n            total={props.total}\n            colors={selectedColors}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst PieChartDiv: React.FC<{\n  choices: { text: string; count: number }[];\n  total: number;\n  colors: string[];\n}> = (props) => {\n  const [hovered, setHovered] = useState<number | undefined>(undefined);\n\n  return (\n    <PieChart\n      animate={true}\n      label={(labelRenderProps: any) => {\n        return labelRenderProps.dataEntry.label === \"0%\"\n          ? \"\"\n          : labelRenderProps.dataEntry.label;\n      }}\n      labelStyle={{ fill: \"beige\", opacity: 0.95, fontSize: 10 }}\n      data={props.choices.map((item, i) => {\n        const percent = `${Math.round((item.count * 100) / props.total)}%`;\n        return {\n          label: i === hovered ? item.count : percent,\n          title: item.text,\n          value: item.count,\n          color: props.colors[i % props.colors.length],\n          percentage: percent,\n        };\n      })}\n      startAngle={180}\n      onMouseOver={(_: any, i: number) => {\n        setHovered(i);\n      }}\n      onMouseOut={() => {\n        setHovered(undefined);\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nexport const GotoPollInput: React.FC<{ showButton?: boolean }> = ({\n  showButton,\n}) => {\n  const [id, updateId] = React.useState(\"\");\n  const history = useHistory();\n\n  const submit = () => {\n    window.location.href = `/${id.toLowerCase()}`;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Go to a Poll\"\n        style={{ background: \"rgba(0,0,0,0)\" }}\n        value={id}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            console.log(\"enter\");\n            submit();\n          }\n        }}\n        onChange={(e) => {\n          updateId(e.target.value);\n        }}\n      />\n      {showButton && (\n        <button className=\"btn btn-primary\" onClick={submit}>\n          Go\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Axios from \"axios\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { VoteForm, IVoteFormProps as IPoll } from \"./VoteForm\";\nimport { CopyLink } from \"./CopyLink\";\nimport { Results } from \"./Results\";\nimport { GotoPollInput } from \"./GotoPollInput\";\nexport const PieChart = require(\"react-minimal-pie-chart\").PieChart;\n\nexport class Poll extends React.Component<RouteComponentProps<{ id: string }>> {\n  state: { invalid: boolean; poll: IPoll; loaded: boolean } = {\n    invalid: false,\n    loaded: false,\n    poll: {\n      total: 0,\n      createdAt: \"\",\n      id: \"\",\n      choices: [\n        { text: \"item 1\", count: 100 },\n        { text: \"item 2\", count: 0 },\n      ],\n      prompt: \"this is a question\",\n    },\n  };\n  socket: WebSocket;\n\n  constructor(props: RouteComponentProps<{ id: string }>) {\n    super(props);\n    this.socket = new WebSocket(\n      `wss://strawpoll.jeongyeoncho.com/api/live/${this.props.match.params.id}`\n    );\n  }\n\n  componentDidMount() {\n    this.socket.onmessage = (message) => {\n      const data = JSON.parse(message.data);\n      if (message.data === \"invalid id\") {\n        this.setState({\n          invalid: true,\n        });\n        return;\n      }\n      let cc = [...this.state.poll.choices];\n      Object.keys(data).forEach((item) => {\n        if (item !== \"total\") {\n          const i = parseInt(item.split(\":\")[1]);\n          cc[i].count = data[item];\n        }\n      });\n      this.setState({\n        poll: {\n          prompt: this.state.poll.prompt,\n          createdAt: this.state.poll.createdAt,\n          id: this.state.poll.id,\n          total: data.total,\n          choices: cc,\n        },\n      });\n      let retry = false;\n      this.socket.onclose = () => {\n        if (!retry) {\n          retry = true;\n          this.socket = new WebSocket(\n            `wss://strawpoll.jeongyeoncho.com/api/live/${this.props.match.params.id}`\n          );\n        } else {\n          console.log(\"closed\");\n        }\n      };\n    };\n\n    Axios.get(\n      \"https://strawpoll.jeongyeoncho.com/api/\" + this.props.match.params.id\n    ).then((res) => {\n      if (!res.data.id) {\n        this.setState({\n          invalid: true,\n        });\n        return;\n      }\n      console.log(res.data);\n      this.setState({\n        poll: res.data,\n        loaded: true,\n      });\n      console.log(res.data);\n    });\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n  }\n  render() {\n    if (this.state.invalid) {\n      return (\n        <div>\n          <div>Invalid id</div>\n          <GotoPollInput showButton />\n          <div></div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <Route path={`${this.props.match.url}/r`}>\n          <Results {...this.state.poll} />\n        </Route>\n        <Route path={this.props.match.url} exact>\n          <VoteForm {...this.state.poll} />\n          <CopyLink />\n        </Route>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nexport const NewPollForm: React.FC = (_props) => {\n  const history = useHistory();\n  const [makeNew, updateMake] = React.useState(false);\n  const [prompt, updatePrompt] = React.useState(\"\");\n  const [choices, updateChoices] = React.useState([\"\", \"\"]);\n  const [customId, updateId] = React.useState(\"\");\n\n  const submit = () => {\n    const filteredChoices = choices.filter((val) => val);\n    if (prompt && filteredChoices.length) {\n      const newPoll = {\n        prompt,\n        choices: filteredChoices,\n        id: customId.length\n          ? customId.trim().replace(/ /g, \"-\").replace(/-$/, \"\")\n          : undefined,\n      };\n      console.log(newPoll);\n      Axios.put(\"https://strawpoll.jeongyeoncho.com/api/new\", newPoll).then(\n        (res) => {\n          history.push(`/${res.data.id}`);\n        }\n      );\n    }\n  };\n\n  const choicesInput = choices.map((_value, i) => {\n    return (\n      <div key={i}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter poll option\"\n          data-i={i}\n          value={choices[i]}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              submit();\n            } else if (e.key === \"Tab\") {\n              if (\n                // @ts-ignore\n                e.target.value &&\n                // @ts-ignore\n                parseInt(e.target.dataset.i) === choices.length - 1\n              ) {\n                updateChoices(choices.concat([\"\"]));\n              }\n            }\n          }}\n          autoFocus={i === choices.length - 1 && makeNew}\n          onChange={(e) => {\n            e.preventDefault();\n            e.persist();\n            choices[i] = e.target.value;\n            let cc = [...choices];\n            cc[i] = e.target.value;\n            updateChoices(cc);\n          }}\n          onBlur={(e) => {\n            // @ts-ignore\n            const i = parseInt(e.target.dataset.i);\n            if (\n              !e.target.value &&\n              choices.length > 2 &&\n              i !== choices.length - 1\n            ) {\n              let cc = [...choices];\n              // @ts-ignore\n              cc.splice(parseInt(e.target.dataset.i), 1);\n              updateChoices(cc);\n            }\n          }}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={prompt}\n        onChange={(e) => {\n          updatePrompt(e.target.value);\n        }}\n        placeholder={\"Type your question here\"}\n        style={{ fontSize: 25 }}\n      />\n      {choicesInput}\n      <div style={{ padding: 10 }}>\n        <button\n          className=\"btn btn-outline-success btn-small\"\n          onClick={() => {\n            if (choices[choices.length - 1]) {\n              updateMake(true);\n              updateChoices(choices.concat([\"\"]));\n            }\n          }}\n        >\n          +\n        </button>\n      </div>\n      <button className=\"btn btn-outline-primary btn-large\" onClick={submit}>\n        Make New Poll\n      </button>\n      <div>\n        <input\n          maxLength={128}\n          type=\"text\"\n          placeholder=\"custom poll ID (optional)\"\n          value={customId}\n          onChange={(e) => {\n            updateId(\n              e.target.value\n                .replace(/ /g, \"-\")\n                .replace(/-+/g, \"-\")\n                .replace(/[^a-zA-Z0-9-_]/gi, \"\")\n                .toLowerCase()\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Poll } from \"./Poll\";\nimport { NewPollForm } from \"./NewPollForm\";\nimport { GotoPollInput } from \"./GotoPollInput\";\n\nconst App: React.FC = (_props) => {\n  return (\n    <Router>\n      <Home />\n    </Router>\n  );\n};\n\nconst Home: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"jumbotron\">\n        <h2>Strawpoll</h2>\n        <p>\n          This is an{\" \"}\n          <a href=\"https://github.com/jeongY-Cho/strawpoll-clone\">\n            open source\n          </a>{\" \"}\n          strawpoll clone. Built on <a href=\"https://expressjs.com/\">express</a>\n          , <a href=\"https://redis.io/\">redis</a> and{\" \"}\n          <a href=\"https://prisma.io\">prisma</a>.\n        </p>\n        <div className=\"btn-group flex-wrap\">\n          <a className=\"btn btn-primary\" href=\"/\" style={{ lineHeight: 2.3 }}>\n            Make Poll\n          </a>\n          <div className=\"btn btn-outline-light\">\n            <GotoPollInput />\n          </div>\n          <button className=\"btn btn-outline-secondary\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <Switch>\n        <Route path=\"/\" exact>\n          <h3>Make a Poll</h3>\n          <NewPollForm />\n        </Route>\n        <Route path=\"/:id\" component={Poll} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}